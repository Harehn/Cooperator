server.port=${PORT:8000}

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
#change this to "none" in production
#this deletes and recreates database content as necessary
spring.jpa.hibernate.ddl-auto=validate
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:postgresql://ec2-54-235-68-3.compute-1.amazonaws.com:5432/d7pvgeebj0ad0e?user=dxxwytqolpcvia&password=2baf1bc6e686ae60bfd56baa12927e7daca9c8b9274ef939a0a2241bedf843cb&sslmode=require
spring.datasource.username=dxxwytqolpcvia
spring.datasource.password=2baf1bc6e686ae60bfd56baa12927e7daca9c8b9274ef939a0a2241bedf843cb



## MULTIPART (MultipartProperties)
## Added for Issue #54 about Upload and Download systems
## Added in reference to https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/
#Enable multipart uploads
spring.servlet.multipart.enabled=true
#Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
#Max file size.
spring.servlet.multipart.max-file-size=50MB
#Max request size.
spring.servlet.multipart.max-request-size=65MB